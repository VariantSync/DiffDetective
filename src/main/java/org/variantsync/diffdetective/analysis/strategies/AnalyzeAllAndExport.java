package org.variantsync.diffdetective.analysis.strategies;

import java.io.IOException;
import java.io.OutputStream;
import java.nio.file.Path;

import org.apache.commons.io.output.CloseShieldOutputStream;
import org.tinylog.Logger;
import org.variantsync.diffdetective.datasets.Repository;
import org.variantsync.diffdetective.diff.CommitDiff;
import org.variantsync.diffdetective.util.IO;

/**
 * Exports all linegraph representations generated by an analysis directly to a file.
 * The file operations are buffered by Java, so it flushes them when it thinks there are enough of
 * them. In contrast to `AnalyzeAndExportIncrementally` this relies on the sanity of the Java
 * defaults
 *
 * @author Benjamin Moosherr
 */
public class AnalyzeAllAndExport extends AnalysisStrategy {
    private OutputStream lineGraphDestination;

    @Override
    public void start(Repository repo, Path outputPath) {
        try {
            lineGraphDestination = IO.newBufferedOutputStream(outputPath);
        } catch (IOException e) {
            Logger.error(e);
        }
    }

    @Override
    public OutputStream onCommit(CommitDiff commit) {
        // lineGraphDestination is reused for all commits. CloseShieldOutputStream ensures that it
        // isn't closed after processing this commit.
        return new CloseShieldOutputStream(lineGraphDestination);
    }

    @Override
    public void end() {
        try {
            lineGraphDestination.close();
        } catch (IOException e) {
            Logger.error(e);
        }
    }
}
